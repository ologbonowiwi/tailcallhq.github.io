"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6834],{1019:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>t,metadata:()=>h,toc:()=>o});var n=s(5893),a=s(1151);const t={title:"@graphQL"},i=void 0,h={id:"operators/graphql",title:"@graphQL",description:"The @graphQL operator allows to specify GraphQL API server request to fetch data from.",source:"@site/docs/operators/graphql.md",sourceDirName:"operators",slug:"/operators/graphql",permalink:"/docs/operators/graphql",draft:!1,unlisted:!1,editUrl:"https://github.com/tailcallhq/tailcallhq.github.io/tree/develop/docs/operators/graphql.md",tags:[],version:"current",frontMatter:{title:"@graphQL"},sidebar:"tutorialSidebar",previous:{title:"@const",permalink:"/docs/operators/const"},next:{title:"@grpc",permalink:"/docs/operators/grpc"}},l={},o=[{value:"baseURL",id:"baseurl",level:3},{value:"name",id:"name",level:3},{value:"args",id:"args",level:3},{value:"headers",id:"headers",level:3},{value:"batch",id:"batch",level:3}];function c(e){const r={a:"a",code:"code",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,a.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(r.p,{children:["The ",(0,n.jsx)(r.strong,{children:"@graphQL"})," operator allows to specify GraphQL API server request to fetch data from."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-graphql",metastring:"showLineNumbers",children:'type Query {\n  users: [User] @graphQL(name: "userList")\n}\n'})}),"\n",(0,n.jsxs)(r.p,{children:["The ",(0,n.jsx)(r.strong,{children:"@graphQL"})," operator facilitates fetching a list of users from the GraphQL API upstream. The ",(0,n.jsx)(r.a,{href:"#name",children:"name"})," argument specifies the root field's name on the upstream server. The upcoming request to the Tailcall server determines the ",(0,n.jsx)(r.code,{children:"User"})," type's inner fields for the request. Depending on the operation type within which one finds the ",(0,n.jsx)(r.code,{children:"@graphQL"})," operator, the Tailcall config determines the query's operation type."]}),"\n",(0,n.jsx)(r.p,{children:"For the next request with the config above:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-graphql",metastring:"showLineNumbers",children:"query {\n  users {\n    id\n    name\n  }\n}\n"})}),"\n",(0,n.jsx)(r.p,{children:"Tailcall will request the next query for the upstream:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-graphql",metastring:"showLineNumbers",children:"query {\n  userList {\n    id\n    name\n  }\n}\n"})}),"\n",(0,n.jsx)(r.h3,{id:"baseurl",children:"baseURL"}),"\n",(0,n.jsxs)(r.p,{children:["This refers to the base URL of the API. If not specified, the default base URL is the one specified in the ",(0,n.jsx)(r.a,{href:"#upstream",children:"@upstream"})," operator."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-graphql",metastring:"showLineNumbers",children:'type Query {\n  users: [User]\n    @graphQL(\n      name: "users"\n      baseURL: "https://graphqlzero.almansi.me/api"\n    )\n}\n'})}),"\n",(0,n.jsx)(r.h3,{id:"name",children:"name"}),"\n",(0,n.jsx)(r.p,{children:"The root field's name on the upstream to request data from. For example:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-graphql",metastring:"showLineNumbers",children:'type Query {\n  users: [User] @graphQL(name: "userList")\n}\n'})}),"\n",(0,n.jsxs)(r.p,{children:["When Tailcall receives a query for the ",(0,n.jsx)(r.code,{children:"users"})," field, it will request a query for ",(0,n.jsx)(r.code,{children:"userList"})," from the upstream."]}),"\n",(0,n.jsx)(r.h3,{id:"args",children:"args"}),"\n",(0,n.jsx)(r.p,{children:"Named arguments for the requested field. For example:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-graphql",metastring:"showLineNumbers",children:'type Query {\n  user: User\n    @graphQL(\n      name: "user"\n      args: [{key: "id", value: "{{value.userId}}"}]\n    )\n}\n'})}),"\n",(0,n.jsx)(r.p,{children:"Will request the next query from the upstream for the first user's name:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-graphql",metastring:"showLineNumbers",children:"query {\n  user(id: 1) {\n    name\n  }\n}\n"})}),"\n",(0,n.jsx)(r.h3,{id:"headers",children:"headers"}),"\n",(0,n.jsxs)(r.p,{children:["The ",(0,n.jsx)(r.code,{children:"headers"})," parameter allows customizing the headers of the GraphQL request made by the ",(0,n.jsx)(r.code,{children:"@graphQL"})," operator. Specifying a key-value map of header names and their values achieves this."]}),"\n",(0,n.jsx)(r.p,{children:"For instance:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-graphql",metastring:"showLineNumbers",children:'type Mutation {\n  users: User\n    @graphQL(\n      name: "users"\n      headers: [{key: "X-Server", value: "Tailcall"}]\n    )\n}\n'})}),"\n",(0,n.jsxs)(r.p,{children:["In this example, a request to ",(0,n.jsx)(r.code,{children:"/users"})," will include the HTTP header ",(0,n.jsx)(r.code,{children:"X-Server"})," with the value ",(0,n.jsx)(r.code,{children:"Tailcall"}),"."]}),"\n",(0,n.jsx)(r.h3,{id:"batch",children:"batch"}),"\n",(0,n.jsxs)(r.p,{children:["In case the upstream GraphQL server supports request batching, we can specify the ",(0,n.jsx)(r.code,{children:"batch"})," argument to batch requests to a single upstream into a single batch request. For example:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-graphql",metastring:"showLineNumbers",children:'schema\n  @upstream(\n    batch: {\n      maxSize: 1000\n      delay: 10\n      headers: ["X-Server", "Authorization"]\n    }\n  ) {\n  query: Query\n  mutation: Mutation\n}\n\ntype Query {\n  users: [User] @graphQL(name: "users", batch: true)\n  posts: [Post] @graphQL(name: "posts", batch: true)\n}\n'})}),"\n",(0,n.jsxs)(r.p,{children:["Make sure you have also specified batch settings to the ",(0,n.jsx)(r.code,{children:"@upstream"})," and to the ",(0,n.jsx)(r.code,{children:"@graphQL"})," operator."]})]})}function d(e={}){const{wrapper:r}={...(0,a.a)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},1151:(e,r,s)=>{s.d(r,{Z:()=>h,a:()=>i});var n=s(7294);const a={},t=n.createContext(a);function i(e){const r=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function h(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),n.createElement(t.Provider,{value:r},e.children)}}}]);