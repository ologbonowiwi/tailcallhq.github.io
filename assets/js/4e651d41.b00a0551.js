"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9727],{3936:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var n=o(5893),i=o(1151);const r={title:"@modify"},s=void 0,a={id:"operators/modify",title:"@modify",description:"The @modify operator in GraphQL provides the flexibility to alter the attributes of a field or a node within your GraphQL schema. Here's how you can use this operator:",source:"@site/docs/operators/modify.md",sourceDirName:"operators",slug:"/operators/modify",permalink:"/docs/operators/modify",draft:!1,unlisted:!1,editUrl:"https://github.com/tailcallhq/tailcallhq.github.io/tree/develop/docs/operators/modify.md",tags:[],version:"current",frontMatter:{title:"@modify"},sidebar:"tutorialSidebar",previous:{title:"@link",permalink:"/docs/operators/link"},next:{title:"@omit",permalink:"/docs/operators/omit"}},d={},c=[{value:"name",id:"name",level:2},{value:"omit",id:"omit",level:2}];function l(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"@modify"})," operator in GraphQL provides the flexibility to alter the attributes of a field or a node within your GraphQL schema. Here's how you can use this operator:"]}),"\n",(0,n.jsx)(t.h2,{id:"name",children:"name"}),"\n",(0,n.jsxs)(t.p,{children:["You can rename a field or a node in your GraphQL schema using the ",(0,n.jsx)(t.code,{children:"name"})," argument in the ",(0,n.jsx)(t.code,{children:"@modify"})," operator. This can be helpful when the field name in your underlying data source doesn't match the desired field name in your schema. For instance:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-graphql",metastring:"showLineNumbers",children:'type User {\n  id: Int! @modify(name: "userId")\n}\n'})}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:'@modify(name: "userId")'})," informs GraphQL to present the field known as ",(0,n.jsx)(t.code,{children:"id"})," in the underlying data source as ",(0,n.jsx)(t.code,{children:"userId"})," in your schema."]}),"\n",(0,n.jsx)(t.h2,{id:"omit",children:"omit"}),"\n",(0,n.jsxs)(t.p,{children:["You can exclude a field or a node from your GraphQL schema using the ",(0,n.jsx)(t.code,{children:"omit"})," argument in the ",(0,n.jsx)(t.code,{children:"@modify"})," operator. This can be useful if you want to keep certain data hidden from the client. For instance:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-graphql",metastring:"showLineNumbers",children:"type User {\n  id: Int! @modify(omit: true)\n}\n"})}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"@modify(omit: true)"})," instructs GraphQL to exclude the ",(0,n.jsx)(t.code,{children:"id"})," field from the schema, making it inaccessible to the client."]}),"\n",(0,n.jsx)(t.admonition,{type:"tip",children:(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"@omit"})," is a standalone operator and is an alias/shorthand for ",(0,n.jsx)(t.code,{children:"modify(omit: true)"})," checkout ",(0,n.jsx)(t.a,{href:"/docs/operators/omit",children:"documentation"})]})})]})}function h(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},1151:(e,t,o)=>{o.d(t,{Z:()=>a,a:()=>s});var n=o(7294);const i={},r=n.createContext(i);function s(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);