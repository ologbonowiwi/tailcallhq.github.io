"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7973],{5944:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var t=n(5893),r=n(1151);const s={title:"@link",description:"Discover how the @link operator can transform your GraphQL schema, enabling seamless integration of external resources like configurations, .proto files, and SSL/TLS certificates for enhanced functionality and security. Learn to streamline and secure your GraphQL configurations with our comprehensive guide."},o=void 0,a={id:"operators/link",title:"@link",description:"Discover how the @link operator can transform your GraphQL schema, enabling seamless integration of external resources like configurations, .proto files, and SSL/TLS certificates for enhanced functionality and security. Learn to streamline and secure your GraphQL configurations with our comprehensive guide.",source:"@site/docs/operators/link.md",sourceDirName:"operators",slug:"/operators/link",permalink:"/docs/operators/link",draft:!1,unlisted:!1,editUrl:"https://github.com/tailcallhq/tailcallhq.github.io/tree/develop/docs/operators/link.md",tags:[],version:"current",frontMatter:{title:"@link",description:"Discover how the @link operator can transform your GraphQL schema, enabling seamless integration of external resources like configurations, .proto files, and SSL/TLS certificates for enhanced functionality and security. Learn to streamline and secure your GraphQL configurations with our comprehensive guide."},sidebar:"tutorialSidebar",previous:{title:"@http",permalink:"/docs/operators/http"},next:{title:"@modify",permalink:"/docs/operators/modify"}},c={},l=[{value:"How it Works",id:"how-it-works",level:2},{value:"Example",id:"example",level:2},{value:"Supported Types",id:"supported-types",level:2},{value:"Config",id:"config",level:3},{value:"Protobuf",id:"protobuf",level:3},{value:"Script",id:"script",level:3},{value:"Cert",id:"cert",level:3},{value:"Key",id:"key",level:3},{value:"Operation",id:"operation",level:3}];function h(e){const i={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.strong,{children:"@link"})," operator is used for bringing external resources into your GraphQL schema. It makes it easier to include configurations, .proto files for gRPC services, and other files into your schema. With this operator, external resources are either merged with or used effectively in the importing configuration."]}),"\n",(0,t.jsx)(i.h2,{id:"how-it-works",children:"How it Works"}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"@link"})," directive requires specifying a source ",(0,t.jsx)(i.code,{children:"src"}),", the resource's type ",(0,t.jsx)(i.code,{children:"type"}),", and an optional identifier ",(0,t.jsx)(i.code,{children:"id"}),"."]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"src"}),": The source of the link is defined here. It can be either a URL or a file path. When a file path is given, it's relative to the file's location that is importing the link."]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"type"}),": This specifies the link's type, which determines how the imported resource is integrated into the schema. For a list of supported types, see the ",(0,t.jsx)(i.a,{href:"#supported-types",children:"Supported Types"})," section."]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"id"}),": This is an optional field that assigns a unique identifier to the link. It's helpful for referring to the link within the schema."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"example",children:"Example"}),"\n",(0,t.jsxs)(i.p,{children:["The following example illustrates how to utilize the ",(0,t.jsx)(i.code,{children:"@link"})," directive to incorporate a Protocol Buffers (.proto) file for a gRPC service into your GraphQL schema."]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-graphql",metastring:"showLineNumbers",children:'schema\n  @server(port: 8000, graphiql: true)\n  @upstream(\n    baseURL: "http://news.local"\n    httpCache: true\n    batch: {delay: 10}\n  )\n  @link(\n    id: "news"\n    src: "../src/grpc/news.proto"\n    type: Protobuf\n  ) {\n  query: Query\n}\n\ntype Query {\n  news: NewsData!\n    @grpc(method: "news.NewsService.GetAllNews")\n}\n\ntype News {\n  id: Int\n  title: String\n  body: String\n  postImage: String\n}\n\ntype NewsData {\n  news: [News]!\n}\n'})}),"\n",(0,t.jsx)(i.h2,{id:"supported-types",children:"Supported Types"}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"@link"})," directive enriches your configuration by supporting the integration of external resources. Each link type is designed to serve a specific purpose, enhancing the functionality and flexibility of your schema. Below is a detailed overview of each supported link type:"]}),"\n",(0,t.jsx)(i.h3,{id:"config",children:"Config"}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"Config"})," link type is essential for importing other configuration files. This feature enables a modular approach to schema management by allowing configurations from the imported file to override overlapping settings in the main schema. This functionality is useful in large projects, where maintaining a single monolithic schema file becomes impractical. By using ",(0,t.jsx)(i.code,{children:"Config"}),", developers can split their schema configurations into manageable pieces, thus promoting better organization and scalability."]}),"\n",(0,t.jsx)(i.p,{children:"Example use case:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Modularizing schema configurations for different environments (development, staging, production)."}),"\n",(0,t.jsx)(i.li,{children:"Reusing common configurations across multiple schema files."}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"protobuf",children:"Protobuf"}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"Protobuf"})," link type integrates Protocol Buffers definitions by importing .proto files. This integration is crucial for Tailcall to communicate with gRPC services. By including ",(0,t.jsx)(i.code,{children:".proto"})," definitions, the Tailcall server can directly interact with gRPC services, allowing for efficient and type-safe communication."]}),"\n",(0,t.jsxs)(i.p,{children:["For detailed integration steps and best practices, refer to the ",(0,t.jsx)(i.a,{href:"/docs/guides/grpc",children:"gRPC Integration Guide"}),"."]}),"\n",(0,t.jsx)(i.h3,{id:"script",children:"Script"}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"Script"})," link type allows the config to link to an external JavaScript file. This file can contain custom logic that is executed in response to HTTP request-response events. This feature enables developers to implement custom behaviors, such as adding headers to responses or filtering requests based on specific criteria."]}),"\n",(0,t.jsx)(i.p,{children:"Example script for adding a custom header to all outgoing requests:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-javascript",metastring:"showLineNumbers",children:'function onRequest({request}) {\n  // Add a custom header for all outgoing requests\n  request.headers["X-Custom-Header"] = "Processed"\n\n  // Return the updated request\n  return {request}\n}\n'})}),"\n",(0,t.jsx)(i.h3,{id:"cert",children:"Cert"}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"Cert"})," link type is designed for importing SSL/TLS certificates, a crucial component for enabling HTTPS in your Tailcall server. This link type ensures that your Tailcall server can expose connections over HTTPS."]}),"\n",(0,t.jsx)(i.admonition,{type:"tip",children:(0,t.jsxs)(i.p,{children:["When using the ",(0,t.jsx)(i.code,{children:"Cert"})," link type, specify the path to the certificate file. Ensure the certificate is up-to-date and issued by a trusted certificate authority (CA) to avoid security warnings or connection issues."]})}),"\n",(0,t.jsx)(i.p,{children:"Example use case:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Securing communication between the Tailcall server and clients."}),"\n",(0,t.jsx)(i.li,{children:"Enhancing privacy and security by encrypting data in transit."}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"key",children:"Key"}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"Key"})," link type imports the private key associated with your SSL/TLS certificate, enabling HTTPS for your Tailcall server. The private key is a critical security element that decrypts information encrypted by the corresponding public key in the SSL/TLS certificate."]}),"\n",(0,t.jsxs)(i.p,{children:["When configuring the ",(0,t.jsx)(i.code,{children:"Key"})," link type, provide the path to your private key file. Ensure the private key matches the imported certificate specified by the ",(0,t.jsx)(i.a,{href:"#cert",children:"Cert"})," link above, and is protected by appropriate file permissions to maintain security."]}),"\n",(0,t.jsx)(i.h3,{id:"operation",children:"Operation"}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"Operation"})," link type connects your schema to a set of predefined, GraphQL spec-compliant queries and mutations. This functionality allows for the validation and optimization of these operations by the Tailcall server."]}),"\n",(0,t.jsx)(i.p,{children:"Each type serves a specific purpose, enabling the flexible integration of external resources into your GraphQL schema."})]})}function d(e={}){const{wrapper:i}={...(0,r.a)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},1151:(e,i,n)=>{n.d(i,{Z:()=>a,a:()=>o});var t=n(7294);const r={},s=t.createContext(r);function o(e){const i=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(s.Provider,{value:i},e.children)}}}]);