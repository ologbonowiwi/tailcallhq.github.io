"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7021],{6934:(e,l,i)=>{i.r(l),i.d(l,{assets:()=>o,contentTitle:()=>s,default:()=>d,frontMatter:()=>n,metadata:()=>c,toc:()=>r});var t=i(5893),a=i(1151);const n={title:"CLI"},s=void 0,c={id:"guides/cli",title:"CLI",description:"The TailCall CLI (Command Line Interface) is an essential part of the TailCall toolkit. It allows developers to manage and optimize GraphQL configurations directly from the command line. Each command within the CLI handles a specific aspect of GraphQL composition. Below, you'll find a detailed overview of each command, along with its options and usage examples.",source:"@site/docs/guides/cli.md",sourceDirName:"guides",slug:"/guides/cli",permalink:"/docs/guides/cli",draft:!1,unlisted:!1,editUrl:"https://github.com/tailcallhq/tailcallhq.github.io/tree/develop/docs/guides/cli.md",tags:[],version:"current",frontMatter:{title:"CLI"},sidebar:"tutorialSidebar",previous:{title:"Apollo Studio",permalink:"/docs/guides/apollo-studio"},next:{title:"Client Tuning",permalink:"/docs/guides/client-tuning"}},o={},r=[{value:"check",id:"check",level:2},{value:"--n-plus-one-queries",id:"--n-plus-one-queries",level:3},{value:"--schema",id:"--schema",level:3},{value:"--format",id:"--format",level:3},{value:"start",id:"start",level:2},{value:"init",id:"init",level:2}];function h(e){const l={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(l.p,{children:"The TailCall CLI (Command Line Interface) is an essential part of the TailCall toolkit. It allows developers to manage and optimize GraphQL configurations directly from the command line. Each command within the CLI handles a specific aspect of GraphQL composition. Below, you'll find a detailed overview of each command, along with its options and usage examples."}),"\n",(0,t.jsx)(l.h2,{id:"check",children:"check"}),"\n",(0,t.jsxs)(l.p,{children:["The ",(0,t.jsx)(l.code,{children:"check"})," command validates a composition spec. Notably, this command can detect potential N+1 issues. To use the ",(0,t.jsx)(l.code,{children:"check"})," command, follow this format:"]}),"\n",(0,t.jsx)(l.pre,{children:(0,t.jsx)(l.code,{className:"language-bash",children:"tailcall check [options] <file>...\n"})}),"\n",(0,t.jsxs)(l.p,{children:["The ",(0,t.jsx)(l.code,{children:"check"})," command offers options that control settings such as the display of the generated schema, n + 1 issues etc."]}),"\n",(0,t.jsx)(l.h3,{id:"--n-plus-one-queries",children:"--n-plus-one-queries"}),"\n",(0,t.jsx)(l.p,{children:"This flag triggers the detection of N+1 issues."}),"\n",(0,t.jsxs)(l.ul,{children:["\n",(0,t.jsx)(l.li,{children:"Type: Boolean"}),"\n",(0,t.jsx)(l.li,{children:"Default: false"}),"\n"]}),"\n",(0,t.jsx)(l.pre,{children:(0,t.jsx)(l.code,{className:"language-bash",children:"tailcall check --n-plus-one-queries <file>...\n"})}),"\n",(0,t.jsx)(l.h3,{id:"--schema",children:"--schema"}),"\n",(0,t.jsx)(l.p,{children:"This option enables the display of the schema of the composition spec."}),"\n",(0,t.jsxs)(l.ul,{children:["\n",(0,t.jsx)(l.li,{children:"Type: Boolean"}),"\n",(0,t.jsx)(l.li,{children:"Default: false"}),"\n"]}),"\n",(0,t.jsx)(l.pre,{children:(0,t.jsx)(l.code,{className:"language-bash",children:"tailcall check --schema <file1> <file2> ... <fileN>\n"})}),"\n",(0,t.jsxs)(l.p,{children:["The ",(0,t.jsx)(l.code,{children:"check"})," command allows for files. Specify each file path, separated by a space, after the options."]}),"\n",(0,t.jsx)(l.p,{children:"Example:"}),"\n",(0,t.jsx)(l.pre,{children:(0,t.jsx)(l.code,{className:"language-bash",children:"tailcall check --schema ./path/to/file1.graphql ./path/to/file2.graphql\n"})}),"\n",(0,t.jsx)(l.h3,{id:"--format",children:"--format"}),"\n",(0,t.jsxs)(l.p,{children:["This is an optional command which allows changing the format of the input file. It accepts ",(0,t.jsx)(l.code,{children:"gql"})," or ",(0,t.jsx)(l.code,{children:"graphql"}),",",(0,t.jsx)(l.code,{children:"yml"})," or ",(0,t.jsx)(l.code,{children:"yaml"}),", ",(0,t.jsx)(l.code,{children:"json"})," ."]}),"\n",(0,t.jsx)(l.pre,{children:(0,t.jsx)(l.code,{className:"language-bash",children:"tailcall check ./path/to/file1.graphql ./path/to/file2.graphql --format json\n"})}),"\n",(0,t.jsx)(l.h2,{id:"start",children:"start"}),"\n",(0,t.jsxs)(l.p,{children:["The ",(0,t.jsx)(l.code,{children:"start"})," command launches the TailCall Server, acting as a GraphQL proxy with specific configurations. The server can publish GraphQL configurations."]}),"\n",(0,t.jsx)(l.p,{children:"To start the server, use the following command:"}),"\n",(0,t.jsx)(l.pre,{children:(0,t.jsx)(l.code,{className:"language-bash",children:"tailcall start <file1> <file2> ... <fileN> <http_path1> <http_path2> .. <http_pathN>\n"})}),"\n",(0,t.jsxs)(l.p,{children:["The ",(0,t.jsx)(l.code,{children:"start"})," command allows for files and supports loading configurations over HTTP. You can mix file system paths with HTTP paths. Specify each path, separated by a space, after the options."]}),"\n",(0,t.jsx)(l.p,{children:"Example:"}),"\n",(0,t.jsx)(l.pre,{children:(0,t.jsx)(l.code,{className:"language-bash",children:"tailcall start ./path/to/file1.graphql ./path/to/file2.graphql http://example.com/file2.graphql\n"})}),"\n",(0,t.jsx)(l.h2,{id:"init",children:"init"}),"\n",(0,t.jsxs)(l.p,{children:["The ",(0,t.jsx)(l.code,{children:"init"})," command bootstraps a new TailCall project. It creates the necessary GraphQL schema files in the provided file path."]}),"\n",(0,t.jsx)(l.pre,{children:(0,t.jsx)(l.code,{className:"language-bash",children:"tailcall init <file_path>\n"})}),"\n",(0,t.jsx)(l.p,{children:"This command prompts for file creation and configuration, creating the following files:"}),"\n",(0,t.jsxs)(l.table,{children:[(0,t.jsx)(l.thead,{children:(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.th,{style:{textAlign:"right"},children:"File Name"}),(0,t.jsx)(l.th,{children:"Description"})]})}),(0,t.jsxs)(l.tbody,{children:[(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{style:{textAlign:"right"},children:(0,t.jsx)(l.a,{href:"https://github.com/tailcallhq/tailcall/blog/main/generated/.tailcallrc.schema.json",children:".tailcallrc.schema.json"})}),(0,t.jsxs)(l.td,{children:["Provides autocomplete in your editor when the configuration is written in ",(0,t.jsx)(l.code,{children:"json"})," or ",(0,t.jsx)(l.code,{children:"yml"})," format."]})]}),(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{style:{textAlign:"right"},children:(0,t.jsx)(l.a,{href:"https://the-guild.dev/graphql/config/docs",children:".graphqlrc.yml"})}),(0,t.jsxs)(l.td,{children:["A GraphQL Configuration that references your Tailcall config (if it's in ",(0,t.jsx)(l.code,{children:".graphql"})," format) and the following ",(0,t.jsx)(l.code,{children:".tailcallrc.graphql"}),"."]})]}),(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{style:{textAlign:"right"},children:(0,t.jsx)(l.a,{href:"https://github.com/tailcallhq/tailcall/blog/main/generated/.tailcallrc.graphql",children:".tailcallrc.graphql"})}),(0,t.jsxs)(l.td,{children:["Contains Tailcall specific auto-completions for ",(0,t.jsx)(l.code,{children:".graphql"})," format."]})]})]})]})]})}function d(e={}){const{wrapper:l}={...(0,a.a)(),...e.components};return l?(0,t.jsx)(l,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},1151:(e,l,i)=>{i.d(l,{Z:()=>c,a:()=>s});var t=i(7294);const a={},n=t.createContext(a);function s(e){const l=t.useContext(n);return t.useMemo((function(){return"function"==typeof e?e(l):{...l,...e}}),[l,e])}function c(e){let l;return l=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(n.Provider,{value:l},e.children)}}}]);